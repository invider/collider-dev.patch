name: Pong
tags: start,begin,beginner,tutor,tutorial,sample,example,excercise,code,intro,arcade

== Intro

Pong was created in 1972 by Allan Alcorn, the 2nd non-founding employee of Atari, as an exercise. Nolan Bushnell, the Atari co-founder, reasoned that an electronic version of ping-pong will be a perfect way to get familiar with arcade game development. Especially considering that a similar concept had already been implemented in Magnavox Odyssey. 

Little did they know, that Pong would become a booster that brought Atari into a multi-billion corporation orbit.

Today, Pong is considered to be an arcade classic.
Also, with its iconic gameplay, it still works as a good exercise in game development.

Thus, this tutorial covers all the steps necessary to implement a web-based clone of Pong with Collider.JAM and JavaScript.

== Core Concepts

We need at least 3 components to implement
a viable Pong version:

* a puck moved by its speed vector
* two paddles controlled by players
* a score counter

There is also an invisible, but nevertheless present,
simple physics simulation to detect the puck
collisions with the paddles and the edges.

The game scene is going to be implemented in a single *mod*.

Inside, we will place the */dna* folder to keep our prototypes.

_
> Collider.JAM has the concept of *mods*, which can represent
> modules, plugins, scenes, levels, game layers,
> and game states among other things.
>
> You can view a *mod* as a minigame with its own code,
> structure, resources...
> It can be the main menu or a player configuration screen,
> or maybe a map screen.
>
> Usually the *mod* structure is determined
> by the corresponding directory.
> A *mod* has it's own *dna*, *lab*, *trap* and other folders.
_


There are going to be only two prototypes in */dna* - Puck and Paddle.

A single object in */lab/score.js* will represent the score indicator.
The indicator is a singleton existing for the whole game lifespan.
So instead of putting it in *dna* and creating in _setup()_,
we just put it directly in *lab*.

The */res* folder will keep all sound effects. We don't need any bitmap or vector graphics in this tutorial, since everything is drawn by code.

The *trap* folder keeps event handlers.
Control events like _keyDown_ and _keyUp_ as well as custom events like _newGame_ and _spawnPunk_ are trapped here.

> Note, that a file location and name are important in Collider.JAM.
>
> For example, there won't be any score if *score.js*
> will be placed outside of */lab*.
> Objects in */lab* are considered to be "alive".
>
> Puck and Paddle MUST be placed in */dna* for similar reason.
> Constructors and factories are expected to be in */dna*.
> Constructor names MUST be capitalized - that is how
> Collider.JAM understands it deals with constructors.
>
> So be careful with the file and object naming and placement.
> It often affects the object's behavior.


== Foundation

Create a folder named _pong.mod_.
The _.mod_ extension is necessary for Collider.JAM
to determine the root of the project.


Once created, you can _cd_ into it:

    cd pong.mod

And run the empty mod with:

    jam -d

The <i>-d</i> flag tells Collider.JAM to enable development and debug features.

It is very useful in development.

_
> Make sure you have _Collider.JAM_
> [installed](#.install)
> before starting this tutorial.
> The easiest way is to run "npm i -g collider.jam"
> in a terminal emulator.
>
> Collider.JAM makes all kind of JavaScript magic
> to hide the boilerplate and make development smooth.
_


== Puck

This prototype is located in _/dna/Puck.js_ and implements the puck behavior and visuals.


=== defaults

Let's declare some constants and default values:
```
// dna/Puck.js

#include::../demo/pong-ce.mod/dna/Puck.js | sed -n '/const MAX_SPEED/,/class Puck/p' | head -n -2
```


=== constructor

We'll use _class_ syntax to declare our prototype.
It's concise and works well except for a few special cases:
```
// dna/Puck.js
// ...

#include::../demo/pong-ce.mod/dna/Puck.js | sed -n '/class Puck/,/evo/p' | head -n -2
#include::../demo/pong-ce.mod/dna/Puck.js | tail -n 1
```
The _augment()_ function is provided by Collider.JAM and augments the target object with values from source objects.

We assign default values from *df* first and init values form *st* later (so the init values can override the default ones).
It is a common idiom in Collider.JAM object initialization - declare an object with default values, pass an object with init values, and then augment the constructed object with both.


=== behavior

The puck needs the _evo(dt)_ function to determine its behavior and the _draw()_ function to define its look.

The _evo(dt)_ is the most complex one:
```
#include::../demo/pong-ce.mod/dna/Puck.js | sed -n '/evo/,/draw/p' | head -n -2
```

First, we need two guards to prevent evolution from happening while the game countdown is still on or we are holding the puck.
If the countdown value in _lab.score_ object is anything, but 0, we skip the evolution. We let the _score_ object itself handle the countdown behavior.

The _hold_ value tracks the time left to keep the puck frozen - we don't want to launch the puck the moment it's created. We have to reduce the timer until it's 0 or less, then we play a sound effect and the puck evolution begins.

The evolution itself has two main components - movement and collision detection.

We preserve coordinates before the movement to jump back in case of collision. That way we can prevent the tunnel effect through the edges and paddles. It is a crude and not exactly precise approach, but it works fine in our case.

The collision detection itself is split into two phases - collision with the edges and collision with the paddles.

The edge collision is handled by Puck locally. Notice the difference between the left/right and the top/bottom edges. For the top and the bottom edge we have to reflect the puck vector over the Y-axis:

     this.dy *= -1

and play the boing sound effect.

In the case of the left or the right edge, we kill the puck and score the corresponding side. The _score_ logic is moved out into an external trap. It is a game-level event and it is a good practice to keep it in a separate function instead of being hidden in Puck.

The collision detection with paddles is different since it is handled mostly by the paddles.

We iterate over all nodes in _/lab_ and find the ones with *touch* (we assume that *touch()* will be a function here).
It means the *touch()* function MUST be defined on all entities the puck can touch (paddles in our case).

When the paddle hit is detected, we raise the _touched_ flag and increase the speed. The puck movement vector reflection is done in the paddle itself since it depends on the place on the paddle we hit.


=== rendering

The _draw()_ procedure of Puck is pretty simple - we just have to draw a circle.

```
#include::../demo/pong-ce.mod/dna/Puck.js | sed -n '/draw/,/}/p'
```
To setup the drawing, we set the line width in pixels and the stroke HSL color.
Then we call the _circle()_ function to draw the circle.



== Paddle

This *class* represents the left and the right paddles.

Its _draw()_ and _evo(dt)_ functions are quite simple.

The _touch()_ method is the most complex one and handles the collision detection with the puck. It is also responsible for the puck movement vector reflection according to the _REFLECT\_VECTORS_ table.


=== defaults


First, we declare the *df* default object with Paddle width and height.
Then we declare the _REFLECT\_VECTORS_ table - it contains the angles to the normal vector for each Paddle contact area.
```
// dna/Paddle.js

#include::../demo/pong-ce.mod/dna/Paddle.js | sed -n '/const df/,/class Paddle/p' | head -n -2
```


=== constructor

```
#include::../demo/pong-ce.mod/dna/Paddle.js | sed -n '/class Paddle/,/rect(/p' | head -n -2
}
```

The constructor augments default and init values,
creates a holder for actions and defines the speed.

The speed is defined as screen height in pixels/second.
Which means a paddle can travel from top to bottom in one second.

The _init()_ function checks the name of the paddle
and raises the _left_ flag if it is 'left'.

We can't place that in the constructor, since the object
might not be named yet during the construction.
The _init()_ is called by Collider.JAM after the node
is named and attached to the scene tree.

=== collisions

This is where the most of the math happening:
```
#include::../demo/pong-ce.mod/dna/Paddle.js | sed -n '/rect() {/,/evo/p' | head -n -2
```


The _rect()_ is a utility function that calculates the top-left and the bottom-right coordinates.

The _touch(puck)_ function accepts the puck and tries to detect collision.


The collision is determined simply by calculating the distance between the puck center and the active segment of the paddle (the one facing the game field). If the distance is less than the puck radius, we consider the collision test positive.

Once the collision is detected, we calculate the angle of the normal vector. Then we calculate the impact zone and use it to determine the angle of the reflection vector to the normal vector.

The reflection angle is used to set the new movement vector for the puck.


=== behavior

Here the paddle x coordinate gets dynamically adjusted.
That way, the game continues to function properly even when the browser
window size is changed.

The second part of the function takes care of the movement
if the corresponding action is triggered.
```
#include::../demo/pong-ce.mod/dna/Paddle.js | sed -n '/evo/,/draw/p' | head -n -2
```

=== rendering

The _draw()_ just fills a rectangle with HSL-specified color:
```
#include::../demo/pong-ce.mod/dna/Paddle.js | sed -n '/draw/,/up/p' | head -n -2
```
We use _translate()_ to get into the paddle coordinate system (with 0:0 at the paddle center). That is why we MUST _save()_ the context and _restore()_ it afterward.


=== movement control

The functions _up()_ and _down()_ are used by keyboard event traps to trigger the movement:
```
#include::../demo/pong-ce.mod/dna/Paddle.js |  sed -n '/up(/,/^}/p' | head -n -1
```



== Control

Keys are traped by the following 2 functions in 2 files:

```
// trap/keyDown.js

#include::../demo/pong-ce.mod/trap/keyDown.js
```
```
// trap/keyUp.js

#include::../demo/pong-ce.mod/trap/keyUp.js
```
Here we access the paddles directly through the lab with _lab.left_ and _lab.right_.

We raise movement flags in _keyDown()_ and reset them in _keyUp()_.



== Game Events


=== new game

The _"new game"_ event is traped by:
```
// trap/newGame.js
#include::../demo/pong-ce.mod/trap/newGame.js
```
Here we do the initial setup and object spawning. It is triggered by _setup.js_ when the game starts and also fired manually by pressing the Escape key.


=== score

The following trap counts the score:
```
// trap/score.js
#include::../demo/pong-ce.mod/trap/score.js
```
We use a global-level node *env* to keep the *score* object. The player argument can be _left_ or _right_. And we rise the score accordingly.

=== spawn puck

_spawnPuck_ creates a new Puck in _/lab_:


```
// trap/spawnPuck.js

#include::../demo/pong-ce.mod/trap/spawnPuck.js
```
The puck is created by the _spawn()_ function in *lab*.
We pass a DNA name and an init object there.

The provided init object sets the name, the speed, and the puck's coordinates. With screen-relative functions _rx()_ and _ry()_ we place it in the middle of the screen.


== Setup

_setup.js_ contains the function to setup the game before it starts:

```
#include::../demo/pong-ce.mod/setup.js
```
It just traps the new game event.



== Source Code


Full source code is
[available on GitHub](https://github.com/invider/pong-ce.mod).



== Ideas for Improvement

There are multiple directions you can go from here.

You can introduce more variety into the gameplay by providing some kind of random powerups to modify game properties - like increase paddle speed or size, slow down the puck, etc...


You can improve visuals by adding bitmapped graphics or particle effects on collisions.


You can implement simple AI to be able to play against the computer.


You can add the ability to play over the network.


There might be other interesting ideas waiting to be implemented. Even the old and familiar gameplay from Pong can be rethought and refreshed.


== Summary

Collider.JAM makes a good job of hiding complexity
and boilerplate.

You don't need any imports and exports.
You don't bother yourself with a bunch of load() calls to obtain necessary resources.
You don't extend any of the framework prototypes
in order to place something on the screen -
any plain JS objects will do the trick.

You just name the functions and place the files in appropriate folders according to Collider.JAM conventions. And everything is just magically mixed together.

That is the magic of Collider.JAM!

Also notice how straightforward drawing and other common operations like _sin()_, _cos()_, _trap()_, _augment()_, and _kill()_. They are just functions available from the global context. No need to access those features from the bunch of incomprehensive utility objects like Context and Math. They are just there under your tips when you need them.

It makes JavaScript almost as clear and straightforward as BASIC. The code looks like a polite conversation with the framework instead of a rude arguing with the object system.












